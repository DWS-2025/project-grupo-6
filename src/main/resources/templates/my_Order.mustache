<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Cart</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/css/my_order.css">
    <link rel="stylesheet" href="/css/header.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body class="min-h-screen flex flex-col">
    {{> common/header}}
    
    <main class="flex-grow p-6 mt-16 mx-auto max-w-7xl w-full">
        <h1 class="text-[#294156] text-3xl font-light mb-8 flex items-center">
            <i class="fas fa-shopping-cart mr-3"></i> My Cart
        </h1>
        
        <div class="flex flex-col lg:flex-row gap-8">
            <!-- Products section -->
            <div class="flex-grow">
                <div class="space-y-6">
                    {{#order.products}}
                    <div class="product-card bg-white rounded-xl overflow-hidden card-shadow p-5">
                        <div class="flex flex-col md:flex-row gap-6">
                            <a href="/product-details?id={{id}}" class="md:w-1/3 h-48 overflow-hidden rounded-lg">
                                <img src="/image/{{id}}" alt="{{name}}" class="w-full h-full object-cover hover:scale-110 transition-transform duration-500">
                            </a>
                            
                            <div class="flex-grow space-y-4">
                                <div>
                                    <h3 class="text-xl text-[#294156] font-medium">{{name}}</h3>
                                    <p class="text-[#567C8D] mt-1"><i class="fas fa-tag mr-2"></i>${{price}}</p>
                                </div>
                                
                                <form action="/update-amount" method="post" class="quantity-form">
                                    <label for="counter{{id}}" class="text-[#567C8D] block mb-2"><i class="fas fa-cubes mr-2"></i>Quantity:</label>
                                    <div class="flex items-center space-x-2">
                                        <button type="button" class="quantity-btn bg-[#CBD3E6] text-[#294156] w-8 h-8 rounded flex items-center justify-center" onclick="updateQuantity('{{id}}', -1)">
                                            <i class="fas fa-minus text-xs"></i>
                                        </button>
                                        <input type="number" id="counter_{{id}}" name="amount" value="{{amount}}" min="1" class="quantity-input">
                                        <button type="button" class="quantity-btn bg-[#CBD3E6] text-[#294156] w-8 h-8 rounded flex items-center justify-center" onclick="updateQuantity('{{id}}', 1)">
                                            <i class="fas fa-plus text-xs"></i>
                                        </button>
                                    </div>
                                    <input type="hidden" name="productId" value="{{id}}">
                                </form>
                                
                                <form action="/remove-from-order" method="post" class="remove-form">
                                    <input type="hidden" name="productId" value="{{id}}">
                                    <button type="submit" class="btn-danger text-white px-4 py-2 rounded-lg text-sm flex items-center">
                                        <i class="fas fa-trash-alt mr-2"></i> Remove
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                    {{/order.products}}
                    
                    {{^order.products}}
                    <div class="empty-cart bg-white rounded-xl p-10 text-center card-shadow">
                        <i class="fas fa-shopping-cart text-6xl text-[#CBD3E6] mb-4"></i>
                        <p class="text-[#567C8D] text-xl mb-6">Your cart is empty</p>
                        <a href="/products" class="inline-flex items-center bg-[#294156] text-white px-6 py-3 rounded-lg hover:bg-[#567C8D] transition-colors">
                            <i class="fas fa-arrow-right mr-2"></i> Continue Shopping
                        </a>
                    </div>
                    {{/order.products}}
                </div>
            </div>
            
            <!-- Order summary section -->
            {{#order.hasProducts}}
            <div class="lg:w-1/3">
                <div class="bg-white rounded-xl card-shadow p-6 sticky top-24">
                    <h3 class="text-xl text-[#294156] font-medium mb-6 pb-3 border-b border-[#CBD3E6]">
                        <i class="fas fa-receipt mr-2"></i> Order Summary
                    </h3>
                    
                    <ul class="space-y-3 mb-6">
                        {{#order.products}}
                        <li class="flex justify-between items-center pb-2 border-b border-[#CBD3E6]/50">
                            <span class="text-[#567C8D]">{{name}} <span class="text-[#CBD3E6]">x{{amount}}</span></span>
                            <span class="font-medium text-[#294156]">${{price}}</span>
                        </li>
                        {{/order.products}}
                    </ul>
                    
                    <div class="order-total bg-[#F5EFEB] p-4 rounded-lg mb-8">
                        <div class="flex justify-between items-center">
                            <span class="text-[#567C8D]"><i class="fas fa-money-bill-wave mr-2"></i>Total</span>
                            <span class="font-bold text-xl text-[#294156]">${{total}}</span>
                        </div>
                    </div>
                    
                    <div class="bg-[#F5EFEB] rounded-lg p-5">
                        <h3 class="text-lg text-[#294156] font-medium mb-4">
                            <i class="fas fa-map-marker-alt mr-2"></i> Shipping Address
                        </h3>
                        
                        <form action="/confirm-order" method="post" class="confirm-order-form">
                            <div class="flex items-center mb-4">
                                <div class="bg-[#E5EBF1] flex items-center justify-center w-10 h-10 rounded-l-lg border-y border-l border-[#CBD3E6]">
                                    <i class="fas fa-home text-[#567C8D]"></i>
                                </div>
                                <input type="text" name="address" value="{{order.address}}" placeholder="Enter your shipping address" 
                                       class="w-full px-4 py-3 rounded-r-lg border border-[#CBD3E6] focus:outline-none focus:ring-2 focus:ring-[#294156]/30 focus:border-transparent transition-all">
                            </div>
                            
                            <button type="submit" class="btn-primary w-full text-white py-3 rounded-lg mt-2 flex items-center justify-center">
                                <i class="fas fa-check-circle mr-2"></i> Confirm Order
                            </button>
                        </form>
                    </div>
                </div>
            </div>
            {{/order.hasProducts}}
        </div>
    </main>
    
    {{> common/footer}}
    
    <script>
        function updateQuantity(productId, change) {
            const input = document.getElementById(`counter_${productId}`);
            let value = parseInt(input.value) + change;
            if (value < 1) value = 1;
            input.value = value;

            // Mostrar un indicador visual de actualización
            const form = input.closest('.quantity-form');
            form.classList.add('updating');
            
            // Crear FormData con los datos del formulario
            const formData = new FormData();
            formData.append('productId', productId);
            formData.append('amount', value);
            
            // Send update to server usando FormData en lugar de JSON
            fetch('/update-amount', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (response.ok) {
                    return response.json(); // Convertir respuesta a JSON si es exitosa
                } else {
                    throw new Error('Error en la respuesta del servidor');
                }
            })
            .then(data => {
                // Update order summary dynamically
                updateOrderSummary(data);
                
                // Quitar el indicador visual después de una breve pausa
                setTimeout(() => {
                    form.classList.remove('updating');
                }, 500);
                
                // Actualizar el valor en el input para reflejar el cambio
                const updatedProduct = data.products.find(p => p.id == productId);
                if (updatedProduct) {
                    input.value = updatedProduct.amount;
                }
            })
            .catch(error => {
                console.error("Error:", error);
                // No mostrar alerta, solo quitar el indicador visual
                form.classList.remove('updating');
                // Revertir al valor anterior
                setTimeout(() => {
                    window.location.reload(); // Recargar la página si hay un error
                }, 300);
            });
        }

        function updateOrderSummary(data) {
            const orderSummary = document.querySelector('.bg-white ul');
            const totalElement = document.querySelector('.order-total');
            
            // Comprobar que los elementos existen
            if (!orderSummary || !totalElement || !data.products) {
                console.error("No se encontraron elementos necesarios para actualizar el resumen");
                return;
            }

            try {
                // Clear current summary
                orderSummary.innerHTML = '';
    
                // Add updated products
                data.products.forEach(product => {
                    const li = document.createElement('li');
                    li.className = 'flex justify-between items-center pb-2 border-b border-[#CBD3E6]/50';
                    li.innerHTML = `
                        <span class="text-[#567C8D]">${product.name} <span class="text-[#CBD3E6]">x${product.amount}</span></span>
                        <span class="font-medium text-[#294156]">$${product.price}</span>
                    `;
                    orderSummary.appendChild(li);
                });
    
                // Update order total
                totalElement.innerHTML = `
                    <div class="flex justify-between items-center">
                        <span class="text-[#567C8D]"><i class="fas fa-money-bill-wave mr-2"></i>Total</span>
                        <span class="font-bold text-xl text-[#294156]">$${data.total}</span>
                    </div>
                `;
                
                // Actualizar también las cantidades en los inputs
                data.products.forEach(product => {
                    const input = document.getElementById(`counter_${product.id}`);
                    if (input) {
                        input.value = product.amount;
                    }
                });
            } catch (error) {
                console.error("Error al actualizar el resumen:", error);
            }
        }

        function removeFromCart(productId) {
            const formData = new FormData();
            formData.append('productId', productId);
            
            fetch('/remove-from-order', {
                method: 'POST',
                body: formData
            }).then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        }

        function deleteOrder() {
            fetch('/delete-order', {
                method: 'POST',
            }).then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        }

        // Agregar event listeners a todos los inputs de cantidad para actualizarlos al cambiar
        document.addEventListener('DOMContentLoaded', function() {
            const quantityInputs = document.querySelectorAll('.quantity-input');
            
            quantityInputs.forEach(input => {
                // Valor original para restaurar en caso de error
                let originalValue = input.value;
                
                // Evento para cuando el usuario termina de editar el valor
                input.addEventListener('change', function() {
                    const productId = this.closest('.quantity-form').querySelector('input[name="productId"]').value;
                    const value = parseInt(this.value);
                    
                    if (isNaN(value) || value < 1) {
                        this.value = originalValue;
                        return;
                    }
                    
                    // Actualizar la cantidad con el nuevo valor
                    updateQuantity(productId, 0);
                    originalValue = this.value;
                });
                
                // Prevenir valores negativos
                input.addEventListener('input', function() {
                    if (this.value < 1 && this.value !== '') {
                        this.value = 1;
                    }
                });
            });
        });
    </script>
</body>
</html>