<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Products</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/css/product-cards.css">
    <link rel="stylesheet" href="/css/wellcome.css">
    <link rel="stylesheet" href="/css/header.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500&display=swap" rel="stylesheet">
</head>

<body class="bg-[#F5EFEB] font-['Inter']">
    {{> common/header}}

    <main class="p-6 max-w-7xl mx-auto">
        {{#errorMessage}}
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative mb-4" role="alert">
            <span class="block sm:inline font-light">{{errorMessage}}</span>
        </div>
        {{/errorMessage}}

        <div class="flex justify-between items-center mb-8 border-b border-[#294156]/10 pb-4">
            <h2 class="text-2xl font-light tracking-wide text-[#294156] relative inline-block after:content-[''] after:absolute after:-bottom-1 after:left-0 after:w-1/3 after:h-0.5 after:bg-[#294156]/30">Available Products</h2>
        </div>

        <!-- Products Grid -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-6">
            {{#products}}
            <div class="product-card bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden">
                <div class="product-image-container">
                    <a href="/product-details?id={{id}}">
                        <img src="/image/{{id}}" alt="{{name}}" class="cursor-pointer hover:scale-105 transition-transform duration-500">
                    </a>
                </div>
                <div class="product-info p-3 space-y-1">
                    <h3 class="product-name text-[#294156] text-lg font-medium leading-snug">{{name}}</h3>
                    <p class="text-[#567C8D] font-light">${{price}}</p>
                    <p class="text-[#567C8D]/70 text-sm font-light">Stock: {{stock}}</p>
                </div>
                <div class="product-buttons space-y-2 p-4 pt-0">
                    <form action="/add-to-order" method="post" class="block add-to-cart-form">
                        <input type="hidden" name="productId" value="{{id}}">
                        <button type="submit" class="w-full bg-[#294156] text-white px-4 py-2 rounded hover:bg-[green] transition-colors">Add to Cart</button>
                    </form>
                    {{#isAdmin}}
                    <form action="/delete-product" method="post" class="block">
                        <input type="hidden" name="productId" value="{{id}}">
                        <button type="submit" class="w-full bg-[#567C8D] text-white px-4 py-2 rounded hover:bg-[red] transition-colors">Delete Product</button>
                    </form>
                    {{/isAdmin}}
                </div>
            </div>
            {{/products}}
        </div>
    </main>

    {{> common/footer}}
</body>
</html>

<script>
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.add-to-cart-form').forEach(form => {
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            const button = this.querySelector('button');
            const originalText = button.textContent;
            const originalColor = button.style.backgroundColor; // Save the original color
            const stock = this.closest('.product-card').querySelector('.product-info p:nth-child(3)').textContent;
            const stockNumber = parseInt(stock.replace('Stock: ', ''), 10);

            if (stockNumber <= 0) {
                button.textContent = 'Out of Stock';
                button.style.backgroundColor = 'red';
                button.disabled = true;

                // Restore button after 1 second
                setTimeout(() => {
                    button.textContent = originalText;
                    button.style.backgroundColor = originalColor;
                    button.disabled = false;
                }, 1000); // 1000 ms = 1 second

                return; // Stop code execution
            }

            button.disabled = true;
            
            try {
                const response = await fetch(this.action, {
                    method: 'POST',
                    body: new FormData(this)
                });
                
                if (response.ok) {
                    button.textContent = 'Added!';
                    button.style.backgroundColor = 'green';
                    setTimeout(() => {
                        button.textContent = originalText;
                        button.style.backgroundColor = originalColor;
                        button.disabled = false;
                    }, 1000);
                } else {
                    throw new Error('Failed to add to cart');
                }
            } catch (error) {
                button.textContent = 'Error';
                button.style.backgroundColor = 'red';
                setTimeout(() => {
                    button.textContent = originalText;
                    button.style.backgroundColor = originalColor;
                    button.disabled = false;
                }, 2000);
            }
        });
    });
});
</script>