<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Products</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/css/product-cards.css">
    <link rel="stylesheet" href="/css/wellcome.css">
    <link rel="stylesheet" href="/css/header.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500&display=swap" rel="stylesheet">
</head>

<body class="bg-[#F5EFEB] font-['Inter']">
    {{> common/header}}

    <main class="p-6 max-w-7xl mx-auto">
        {{#errorMessage}}
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative mb-4" role="alert">
            <span class="block sm:inline font-light">{{errorMessage}}</span>
        </div>
        {{/errorMessage}}

        <div class="flex justify-between items-center mb-8 border-b border-[#294156]/10 pb-4">
            <h2 class="text-2xl font-light tracking-wide text-[#294156] relative inline-block after:content-[''] after:absolute after:-bottom-1 after:left-0 after:w-1/3 after:h-0.5 after:bg-[#294156]/30">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 inline-block mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                </svg>
                Available Products
            </h2>
        </div>
        
        <!-- Search Box and Sort Options -->
        <div class="mb-6 flex gap-2">
            <input type="text" id="productSearch" placeholder="Search products by name..." 
                   class="w-full p-3 border border-[#294156]/20 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#294156]/50" />
            <button id="searchButton" class="button px-6 py-3 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                Search
            </button>
            <select id="priceSort" class="p-3 border border-[#294156]/20 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#294156]/50 bg-white">
                <option value="default">Sort by</option>
                <option value="price_asc">Price: Low to High</option>
                <option value="price_desc">Price: High to Low</option>
            </select>
        </div>

        <!-- Products Grid -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-6" id="productsGrid">
            <!-- Los productos se cargarán dinámicamente mediante JavaScript -->
        </div>

        <div class="text-center mt-8 mb-6">
            <button id="loadMoreBtn" class="button px-6 py-3 rounded-lg bg-[#294156] text-white hover:bg-[#567C8D] transition-all duration-300 flex items-center mx-auto shadow-md hover:shadow-lg transform hover:-translate-y-1" onclick="loadMoreProducts()">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
                Load More Products
            </button>
        </div>
    </main>

    {{> common/footer}}
</body>
</html>

<script>
    let currentProductPage = 1;
    const productsPerPage = 5;
    let allProductsLoaded = false;

    function loadMoreProducts() {
        // Disable the button while loading products
        const loadMoreBtn = document.getElementById('loadMoreBtn');
        loadMoreBtn.disabled = true;
        loadMoreBtn.textContent = 'Loading...';
        
        // Make AJAX request to the server to get the next page of products
        fetch(`/api/products?page=${currentProductPage}&size=${productsPerPage}`)
            .then(response => response.json())
            .then(data => {
                const products = data.products;
                const productsGrid = document.getElementById('productsGrid');
                
                console.log('Products received:', products);
                
                if (products && products.length > 0) {
                    // Add each product to the grid
                    products.forEach(product => {
                        console.log('Processing product:', product);
                        const template = `
                            <div class="product-card rounded-lg overflow-hidden product-item" data-id="${product.id}" data-name="${product.name}" data-price="${product.price}">
                                <div class="product-image-container">
                                    <a href="/product-details?id=${product.id}">
                                        <img src="/image/${product.id}" alt="${product.name}" class="cursor-pointer hover:scale-105 transition-transform duration-500">
                                    </a>
                                </div>
                                <div class="product-info p-3 space-y-1">
                                    <h3 class="product-name text-[#294156] text-lg font-medium leading-snug">${product.name}</h3>
                                    <p class="text-[#567C8D] font-light">$${product.price}</p>
                                    <p class="text-[#567C8D]/70 text-sm font-light">Stock: ${product.stock}</p>
                                </div>
                                <div class="product-buttons space-y-2 p-4 pt-0">
                                    <form action="/add-to-order" method="post" class="block add-to-cart-form">
                                        <input type="hidden" name="productId" value="${product.id}">
                                        <button type="submit" class="w-full bg-[#294156] text-white px-4 py-2 rounded hover:bg-[green] transition-colors">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                                            </svg>
                                            Add to Cart
                                        </button>
                                    </form>
                                    ${product.isAdmin ? `
                                    <form action="/delete-product" method="post" class="block">
                                        <input type="hidden" name="productId" value="${product.id}">
                                        <button type="submit" class="w-full bg-[#567C8D] text-white px-4 py-2 rounded hover:bg-[red] transition-colors">Delete Product</button>
                                    </form>
                                    ` : ''}
                                </div>
                            </div>
                        `;
                        
                        // Add the product to the grid
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = template.trim();
                        productsGrid.appendChild(tempDiv.firstChild);
                    });
                    
                    // Attach event listeners to the newly added forms
                    attachAddToCartListeners(document.querySelectorAll('.add-to-cart-form'));
                    
                    // Increment the page counter
                    currentProductPage++;
                    
                    // Enable the button again
                    loadMoreBtn.disabled = false;
                    loadMoreBtn.textContent = 'Load More Products';
                    
                    // Check if there are more products to load
                    if (!data.hasMore || products.length < productsPerPage) {
                        loadMoreBtn.style.display = 'none';
                        allProductsLoaded = true;
                    }
                } else {
                    // No more products
                    loadMoreBtn.style.display = 'none';
                    allProductsLoaded = true;
                }
            })
            .catch(error => {
                console.error('Error loading products:', error);
                loadMoreBtn.disabled = false;
                loadMoreBtn.textContent = 'Load More Products';
            });
    }

    // Initial load of first page
    window.onload = function() {
        loadMoreProducts();
    };

    // Function to attach event listeners to add-to-cart forms
    function attachAddToCartListeners(forms) {
        forms.forEach(form => {
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                const button = this.querySelector('button');
                const originalText = button.innerHTML;
                const originalColor = button.style.backgroundColor;
                const stock = this.closest('.product-card').querySelector('.product-info p:nth-child(3)').textContent;
                const stockNumber = parseInt(stock.replace('Stock: ', ''), 10);

                if (stockNumber <= 0) {
                    button.textContent = 'Out of Stock!';
                    button.style.backgroundColor = 'red';
                    button.disabled = true;

                    // Restore button after 1 second
                    setTimeout(() => {
                        button.innerHTML = originalText;
                        button.style.backgroundColor = originalColor;
                        button.disabled = false;
                    }, 1000); // 1000 ms = 1 second

                    return; // Stop code execution
                }

                button.disabled = true;
                
                try {
                    // Check the quantity in the cart
                    const productId = this.querySelector('input[name="productId"]').value;
                    const cartResponse = await fetch(`/get-cart-quantity?productId=${productId}`);
                    const cartData = await cartResponse.json();
                    const cartQuantity = cartData.quantity || 0;
                    
                    // Check if adding one more exceeds the stock
                    if (cartQuantity + 1 > stockNumber) {
                        button.textContent = 'Out of Stock!';
                        button.style.backgroundColor = 'red';
                        
                        // Restore button after 1 second
                        setTimeout(() => {
                            button.innerHTML = originalText;
                            button.style.backgroundColor = originalColor;
                            button.disabled = false;
                        }, 1000); // 1000 ms = 1 second
                        
                        return;
                    }
                    
                    const response = await fetch(this.action, {
                        method: 'POST',
                        body: new FormData(this)
                    });
                    
                    // Try to process the response as JSON, but don't fail if it's not JSON
                    let data = {};
                    try {
                        data = await response.json();
                    } catch (e) {
                        console.log('Response is not JSON, continuing...');
                    }
                    
                    if (response.ok) {
                        button.textContent = 'Added!';
                        button.style.backgroundColor = 'green';
                        setTimeout(() => {
                            button.innerHTML = originalText;
                            button.style.backgroundColor = originalColor;
                            button.disabled = false;
                        }, 1000);
                        
                        // Update the cart counter in the header
                        const cartCounter = document.querySelector('.cart-counter');
                        if (cartCounter && data && data.cartSize) {
                            cartCounter.textContent = data.cartSize;
                        }
                    } else {
                        throw new Error('Failed to add to cart');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    button.textContent = 'Error';
                    button.style.backgroundColor = 'red';
                    setTimeout(() => {
                        button.innerHTML = originalText;
                        button.style.backgroundColor = originalColor;
                        button.disabled = false;
                    }, 2000);
                }
            });
        });
    }

    // Existing cart functionality - now using the function
    document.addEventListener('DOMContentLoaded', function() {
        // Product search functionality
        const searchInput = document.getElementById('productSearch');
        const searchButton = document.getElementById('searchButton');
        const productCards = document.querySelectorAll('.product-card');
        const priceSort = document.getElementById('priceSort');

        // Price sorting functionality
        priceSort.addEventListener('change', function() {
            const sortValue = this.value;
            
            // Clear the products grid
            const productsGrid = document.getElementById('productsGrid');
            productsGrid.innerHTML = '<div class="col-span-full text-center py-8">Loading products...</div>';
            
            // Reset pagination
            currentProductPage = 1;
            
            // Load sorted products
            fetch(`/api/products?page=1&size=${productsPerPage}&sort=${sortValue}`)
                .then(response => response.json())
                .then(data => {
                    // Clear the grid
                    productsGrid.innerHTML = '';
                    
                    if (data.products && data.products.length > 0) {
                        // Show the products
                        data.products.forEach(product => {
                            const template = `
                                <div class="product-card rounded-lg overflow-hidden product-item" data-id="${product.id}" data-name="${product.name}" data-price="${product.price}">
                                    <div class="product-image-container">
                                        <a href="/product-details?id=${product.id}">
                                            <img src="/image/${product.id}" alt="${product.name}" class="cursor-pointer hover:scale-105 transition-transform duration-500">
                                        </a>
                                    </div>
                                    <div class="product-info p-3 space-y-1">
                                        <h3 class="product-name text-[#294156] text-lg font-medium leading-snug">${product.name}</h3>
                                        <p class="text-[#567C8D] font-light">$${product.price}</p>
                                        <p class="text-[#567C8D]/70 text-sm font-light">Stock: ${product.stock}</p>
                                    </div>
                                    <div class="product-buttons space-y-2 p-4 pt-0">
                                        <form action="/add-to-order" method="post" class="block add-to-cart-form">
                                            <input type="hidden" name="productId" value="${product.id}">
                                            <button type="submit" class="w-full bg-[#294156] text-white px-4 py-2 rounded hover:bg-[green] transition-colors">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                                                </svg>
                                                Add to Cart
                                            </button>
                                        </form>
                                        ${product.isAdmin ? `
                                        <form action="/delete-product" method="post" class="block">
                                            <input type="hidden" name="productId" value="${product.id}">
                                            <button type="submit" class="w-full bg-[#567C8D] text-white px-4 py-2 rounded hover:bg-[red] transition-colors">Delete Product</button>
                                        </form>
                                        ` : ''}
                                    </div>
                                </div>
                            `;
                            
                            const tempDiv = document.createElement('div');
                            tempDiv.innerHTML = template.trim();
                            productsGrid.appendChild(tempDiv.firstChild);
                        });
                        
                        // Attach event listeners
                        attachAddToCartListeners(document.querySelectorAll('.add-to-cart-form'));
                        
                        // Increment page
                        currentProductPage++;
                        
                        // Update "Load More" button
                        const loadMoreBtn = document.getElementById('loadMoreBtn');
                        if (data.hasMore) {
                            loadMoreBtn.style.display = '';
                            loadMoreBtn.disabled = false;
                            
                            // Modify onclick to include sorting
                            loadMoreBtn.onclick = function() {
                                loadMoreProductsWithSort(sortValue);
                            };
                        } else {
                            loadMoreBtn.style.display = 'none';
                        }
                    } else {
                        // No products available
                        productsGrid.innerHTML = `
                            <div class="col-span-full text-center py-8">
                                <p>No products available</p>
                            </div>
                        `;
                        document.getElementById('loadMoreBtn').style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Error loading sorted products:', error);
                    productsGrid.innerHTML = `
                        <div class="col-span-full text-center py-8">
                            <p>Error loading products. Please try again.</p>
                        </div>
                    `;
                    document.getElementById('loadMoreBtn').style.display = 'none';
                });
        });
        
        // Database search
        searchButton.addEventListener('click', async function() {
            const searchTerm = searchInput.value.trim();
            
            // If search term is empty, load all products
            if (!searchTerm) {
                window.location.href = '/products';
                return;
            }
            
            try {
                // Clear the products grid
                const productsGrid = document.getElementById('productsGrid');
                productsGrid.innerHTML = '';
                
                // Reset pagination
                currentProductPage = 1;
                
                // Show loading message
                productsGrid.innerHTML = '<div class="col-span-full text-center py-8">Loading results...</div>';
                
                // Make search request
                const response = await fetch(`/search-products-json?term=${encodeURIComponent(searchTerm)}&page=1&size=${productsPerPage}`);
                
                if (response.ok) {
                    const data = await response.json();
                    
                    // Clear the grid
                    productsGrid.innerHTML = '';
                    
                    if (data.products && data.products.length > 0) {
                        // Show found products
                        data.products.forEach(product => {
                            const template = `
                                <div class="product-card rounded-lg overflow-hidden product-item" data-id="${product.id}" data-name="${product.name}" data-price="${product.price}">
                                    <div class="product-image-container">
                                        <a href="/product-details?id=${product.id}">
                                            <img src="/image/${product.id}" alt="${product.name}" class="cursor-pointer hover:scale-105 transition-transform duration-500">
                                        </a>
                                    </div>
                                    <div class="product-info p-3 space-y-1">
                                        <h3 class="product-name text-[#294156] text-lg font-medium leading-snug">${product.name}</h3>
                                        <p class="text-[#567C8D] font-light">$${product.price}</p>
                                        <p class="text-[#567C8D]/70 text-sm font-light">Stock: ${product.stock}</p>
                                    </div>
                                    <div class="product-buttons space-y-2 p-4 pt-0">
                                        <form action="/add-to-order" method="post" class="block add-to-cart-form">
                                            <input type="hidden" name="productId" value="${product.id}">
                                            <button type="submit" class="w-full bg-[#294156] text-white px-4 py-2 rounded hover:bg-[green] transition-colors">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                                                </svg>
                                                Add to Cart
                                            </button>
                                        </form>
                                        ${product.isAdmin ? `
                                        <form action="/delete-product" method="post" class="block">
                                            <input type="hidden" name="productId" value="${product.id}">
                                            <button type="submit" class="w-full bg-[#567C8D] text-white px-4 py-2 rounded hover:bg-[red] transition-colors">Delete Product</button>
                                        </form>
                                        ` : ''}
                                    </div>
                                </div>
                            `;
                            
                            const tempDiv = document.createElement('div');
                            tempDiv.innerHTML = template.trim();
                            productsGrid.appendChild(tempDiv.firstChild);
                        });
                        
                        // Attach event listeners
                        attachAddToCartListeners(document.querySelectorAll('.add-to-cart-form'));
                        
                        // Increment page
                        currentProductPage++;
                        
                        // Update "Load More" button
                        const loadMoreBtn = document.getElementById('loadMoreBtn');
                        if (data.hasMore) {
                            loadMoreBtn.style.display = '';
                            loadMoreBtn.disabled = false;
                            // Change onclick function to use search term
                            loadMoreBtn.onclick = function() {
                                loadMoreSearchResults(searchTerm);
                            };
                        } else {
                            loadMoreBtn.style.display = 'none';
                        }
                    } else {
                        // No products found
                        productsGrid.innerHTML = `
                            <div class="col-span-full text-center py-8">
                                <p>No products found for "${searchTerm}"</p>
                            </div>
                        `;
                        document.getElementById('loadMoreBtn').style.display = 'none';
                    }
                } else {
                    throw new Error('Search failed');
                }
            } catch (error) {
                console.error('Search error:', error);
                document.getElementById('productsGrid').innerHTML = `
                    <div class="col-span-full text-center py-8">
                        <p>Error searching for products. Please try again.</p>
                    </div>
                `;
                document.getElementById('loadMoreBtn').style.display = 'none';
            }
        });
        
        // Function to load more search results
        function loadMoreSearchResults(searchTerm) {
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            loadMoreBtn.disabled = true;
            loadMoreBtn.textContent = 'Loading...';
            
            fetch(`/search-products-json?term=${encodeURIComponent(searchTerm)}&page=${currentProductPage}&size=${productsPerPage}`)
                .then(response => response.json())
                .then(data => {
                    const products = data.products;
                    const productsGrid = document.getElementById('productsGrid');
                    
                    if (products && products.length > 0) {
                        // Add products to the grid
                        products.forEach(product => {
                            const template = `
                                <div class="product-card rounded-lg overflow-hidden product-item" data-id="${product.id}" data-name="${product.name}" data-price="${product.price}">
                                    <div class="product-image-container">
                                        <a href="/product-details?id=${product.id}">
                                            <img src="/image/${product.id}" alt="${product.name}" class="cursor-pointer hover:scale-105 transition-transform duration-500">
                                        </a>
                                    </div>
                                    <div class="product-info p-3 space-y-1">
                                        <h3 class="product-name text-[#294156] text-lg font-medium leading-snug">${product.name}</h3>
                                        <p class="text-[#567C8D] font-light">$${product.price}</p>
                                        <p class="text-[#567C8D]/70 text-sm font-light">Stock: ${product.stock}</p>
                                    </div>
                                    <div class="product-buttons space-y-2 p-4 pt-0">
                                        <form action="/add-to-order" method="post" class="block add-to-cart-form">
                                            <input type="hidden" name="productId" value="${product.id}">
                                            <button type="submit" class="w-full bg-[#294156] text-white px-4 py-2 rounded hover:bg-[green] transition-colors">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                                                </svg>
                                                Add to Cart
                                            </button>
                                        </form>
                                        ${product.isAdmin ? `
                                        <form action="/delete-product" method="post" class="block">
                                            <input type="hidden" name="productId" value="${product.id}">
                                            <button type="submit" class="w-full bg-[#567C8D] text-white px-4 py-2 rounded hover:bg-[red] transition-colors">Delete Product</button>
                                        </form>
                                        ` : ''}
                                    </div>
                                </div>
                            `;
                            
                            const tempDiv = document.createElement('div');
                            tempDiv.innerHTML = template.trim();
                            productsGrid.appendChild(tempDiv.firstChild);
                        });
                        
                        // Attach event listeners
                        attachAddToCartListeners(document.querySelectorAll('.add-to-cart-form'));
                        
                        // Increment page
                        currentProductPage++;
                        
                        // Update button state
                        loadMoreBtn.disabled = false;
                        loadMoreBtn.textContent = 'Load More Products';
                        
                        if (!data.hasMore) {
                            loadMoreBtn.style.display = 'none';
                        }
                    } else {
                        // No more products
                        loadMoreBtn.style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Error loading more search results:', error);
                    loadMoreBtn.disabled = false;
                    loadMoreBtn.textContent = 'Load More Products';
                });
        }
        
        // Function to load more products with specific sorting
        function loadMoreProductsWithSort(sortValue) {
            const loadMoreBtn = document.getElementById('loadMoreBtn');
            loadMoreBtn.disabled = true;
            loadMoreBtn.textContent = 'Loading...';
            
            fetch(`/api/products?page=${currentProductPage}&size=${productsPerPage}&sort=${sortValue}`)
                .then(response => response.json())
                .then(data => {
                    const products = data.products;
                    const productsGrid = document.getElementById('productsGrid');
                    
                    if (products && products.length > 0) {
                        // Add products to the grid
                        products.forEach(product => {
                            const template = `
                                <div class="product-card rounded-lg overflow-hidden product-item" data-id="${product.id}" data-name="${product.name}" data-price="${product.price}">
                                    <div class="product-image-container">
                                        <a href="/product-details?id=${product.id}">
                                            <img src="/image/${product.id}" alt="${product.name}" class="cursor-pointer hover:scale-105 transition-transform duration-500">
                                        </a>
                                    </div>
                                    <div class="product-info p-3 space-y-1">
                                        <h3 class="product-name text-[#294156] text-lg font-medium leading-snug">${product.name}</h3>
                                        <p class="text-[#567C8D] font-light">$${product.price}</p>
                                        <p class="text-[#567C8D]/70 text-sm font-light">Stock: ${product.stock}</p>
                                    </div>
                                    <div class="product-buttons space-y-2 p-4 pt-0">
                                        <form action="/add-to-order" method="post" class="block add-to-cart-form">
                                            <input type="hidden" name="productId" value="${product.id}">
                                            <button type="submit" class="w-full bg-[#294156] text-white px-4 py-2 rounded hover:bg-[green] transition-colors">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                                                </svg>
                                                Add to Cart
                                            </button>
                                        </form>
                                        ${product.isAdmin ? `
                                        <form action="/delete-product" method="post" class="block">
                                            <input type="hidden" name="productId" value="${product.id}">
                                            <button type="submit" class="w-full bg-[#567C8D] text-white px-4 py-2 rounded hover:bg-[red] transition-colors">Delete Product</button>
                                        </form>
                                        ` : ''}
                                    </div>
                                </div>
                            `;
                            
                            const tempDiv = document.createElement('div');
                            tempDiv.innerHTML = template.trim();
                            productsGrid.appendChild(tempDiv.firstChild);
                        });
                        
                        // Attach event listeners
                        attachAddToCartListeners(document.querySelectorAll('.add-to-cart-form'));
                        
                        // Increment page
                        currentProductPage++;
                        
                        // Update button state
                        loadMoreBtn.disabled = false;
                        loadMoreBtn.textContent = 'Load More Products';
                        
                        if (!data.hasMore) {
                            loadMoreBtn.style.display = 'none';
                        }
                    } else {
                        // No more products
                        loadMoreBtn.style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Error loading more sorted products:', error);
                    loadMoreBtn.disabled = false;
                    loadMoreBtn.textContent = 'Load More Products';
                });
        }
    });
</script>