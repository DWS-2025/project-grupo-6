<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Details</title>
    <link rel="stylesheet" href="/css/product-details.css">
    <link rel="stylesheet" href="/css/header.css">
    <link rel="stylesheet" href="/css/dark-mode.css">
</head>
<body>
    {{> common/header}}
    <div class="container">
        <div class="back-button-container">
            <a href="/products" class="back-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="19" y1="12" x2="5" y2="12"></line>
                    <polyline points="12 19 5 12 12 5"></polyline>
                </svg>
                Volver
            </a>
        </div>
        <div class="product-details">
            <div class="product-image-container">
                <img src="/image/{{product.id}}" alt="{{product.name}}" class="product-image">
            </div>
            <div class="product-info">
                <h1 class="product-title">{{product.name}}</h1>
                <p class="product-description">{{product.description}}</p>
                <div class="product-meta">
                    <div class="price-tag">
                        <span class="label">Price:</span>
                        <span class="value">${{product.price}}</span>
                    </div>
                    <div class="stock-info">
                        <span class="label">Stock:</span>
                        <span class="value">{{product.stock}}</span>
                    </div>
                    <div class="rating-info">
                        <span class="label">Rating:</span>
                        <span class="value">{{averageRating}} ⭐</span>
                    </div>
                    <form id="addToCartForm" action="/add-to-order" method="post" class="add-to-cart-form">
                        <input type="hidden" name="productId" value="{{product.id}}">
                        <button type="submit" class="btn btn-primary add-to-cart-btn">Add to Cart</button>
                    </form>
                    
                    <script>
                        document.getElementById('addToCartForm').addEventListener('submit', async function(e) {
                            e.preventDefault();
                            const button = this.querySelector('button');
                            const originalText = button.textContent;
                            const currentStock = parseInt('{{product.stock}}');

                            // Check if out of stock
                            if (currentStock <= 0) {
                                button.textContent = 'Out of Stock!';
                                button.style.backgroundColor = '#c53030';
                                button.disabled = true;

                                // Restore button after 1 second
                                setTimeout(() => {
                                    button.textContent = originalText;
                                    button.style.backgroundColor = '';
                                    button.disabled = false;
                                }, 1000);

                                return;
                            }

                            button.disabled = true;

                            try {
                                // Check the quantity in the cart
                                const cartResponse = await fetch('/get-cart-quantity?productId={{product.id}}');
                                const cartData = await cartResponse.json();
                                const cartQuantity = cartData.quantity || 0;

                                // Check if adding one more exceeds the stock
                                if (cartQuantity + 1 > currentStock) {
                                    button.textContent = 'Out of Stock!';
                                    button.style.backgroundColor = '#c53030';

                                    // Restore button after 1 second
                                    setTimeout(() => {
                                        button.textContent = originalText;
                                        button.style.backgroundColor = '';
                                        button.disabled = false;
                                    }, 1000);

                                    return;
                                }

                                // If there is stock, send the form
                                const response = await fetch('/add-to-order', {
                                    method: 'POST',
                                    body: new FormData(this)
                                });
                                
                                // Intentar procesar la respuesta como JSON, pero no fallar si no es JSON
                                let data = {};
                                try {
                                    data = await response.json();
                                } catch (e) {
                                    console.log('Response is not JSON, continuing...');
                                }

                                if (response.ok) {
                                    // Cambiar fondo a verde y texto a "Added!"
                                    button.textContent = 'Added!';
                                    button.style.backgroundColor = '#2e7d32';

                                    // Restaurar después de 1 segundo
                                    setTimeout(() => {
                                        button.textContent = originalText;
                                        button.style.backgroundColor = '';
                                        button.disabled = false;
                                    }, 1000);

                                    // Update the cart counter in the header
                                    const cartCounter = document.querySelector('.cart-counter');
                                    if (cartCounter && data && data.cartSize) {
                                        cartCounter.textContent = data.cartSize;
                                    }
                                } else {
                                    throw new Error('Failed to add to cart');
                                }
                            } catch (error) {
                                console.error('Error:', error);
                                button.textContent = 'Error';
                                button.style.backgroundColor = '#c53030';

                                // Restore button after 2 seconds
                                setTimeout(() => {
                                    button.textContent = originalText;
                                    button.style.backgroundColor = '';
                                    button.disabled = false;
                                }, 2000);
                            }
                        });
                    </script>
                </div>
            </div>
        </div>

        <div class="reviews-section">
            <h2 class="section-title">Comments</h2>
            <ul class="reviews-list">
                {{#reviews}}
                    <li class="review-item">
                        <div class="review-header">
                            <strong class="review-author">{{user.firstName}} {{user.lastName}}</strong>
                            <div class="rating-display">
                                ({{rating}}/5) ⭐
                            </div>
                        </div>
                        <p class="review-comment">{{comment}}</p>
                        <form action="/delete-review" method="post" class="delete-review-form">
                            <input type="hidden" name="productId" value="{{product.id}}">
                            <input type="hidden" name="reviewId" value="{{id}}">
                            <button type="submit" class="btn btn-delete">Delete Review</button>
                        </form>
                    </li>
                {{/reviews}}
            </ul>

            <div class="review-form">
                <h3 class="form-title">Add Comment</h3>
                <form action="/add-review" method="post" class="add-review-form">
                    <input type="hidden" name="productId" value="{{product.id}}">
                    <div class="form-group">
                        <textarea name="comment" required placeholder="Write your comment here..." class="review-textarea"></textarea>
                    </div>
                    <div class="form-group">
                        <select name="rating" required class="rating-select">
                            <option value="" disabled selected>Select a rating</option>
                            <option value="1">1 ⭐</option>
                            <option value="2">2 ⭐⭐</option>
                            <option value="3">3 ⭐⭐⭐</option>
                            <option value="4">4 ⭐⭐⭐⭐</option>
                            <option value="5">5 ⭐⭐⭐⭐⭐</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Submit Review</button>
                </form>
            </div>
        </div>
    </div>
    {{> common/footer}}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Format the average rating to one decimal place
            const ratingElement = document.querySelector('.rating-info .value');
            const ratingText = ratingElement.textContent;
            const ratingValue = parseFloat(ratingText);
            if (!isNaN(ratingValue)) {
                ratingElement.textContent = ratingValue.toFixed(1) + ' ⭐';
            }
        });
    </script>
</body>
</html>