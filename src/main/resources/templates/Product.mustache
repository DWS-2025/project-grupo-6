<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Details</title>
    <link rel="stylesheet" href="/css/product-details.css">
    <link rel="stylesheet" href="/css/header.css">
    <link rel="stylesheet" href="/css/dark-mode.css">
    <link rel="stylesheet" href="/css/quill-editor.css">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Quill.js Theme -->
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    
    <!-- Fix for Admin Dropdown on Product Details Page -->
    <style>
        /* Ultra-high priority admin dropdown fix for product-details page */
        .admin-menu-container {
            position: relative !important;
            z-index: 999999 !important;
        }
        
        .admin-menu-dropdown {
            position: absolute !important;
            z-index: 999999 !important;
            background-color: white !important;
            box-shadow: 0 8px 16px rgba(0,0,0,0.2) !important;
            border: 1px solid rgba(0,0,0,0.1) !important;
            border-radius: 4px !important;
            overflow: visible !important;
            pointer-events: auto !important;
        }
        
        .admin-menu-dropdown a {
            position: relative !important;
            z-index: 999999 !important;
            pointer-events: auto !important;
            display: block !important;
            color: #333 !important;
            text-decoration: none !important;
            padding: 12px 16px !important;
            border-bottom: 1px solid #f0f0f0 !important;
            transition: all 0.2s !important;
            cursor: pointer !important;
            font-size: 14px !important;
            font-weight: 500 !important;
            background-color: transparent !important;
        }
        
        .admin-menu-dropdown a:hover {
            background-color: #4A7A91 !important;
            color: white !important;
        }
        
        .admin-menu-dropdown a:last-child {
            border-bottom: none !important;
        }
        
        /* Ensure no other elements can overlay the dropdown */
        .container, .product-details, .reviews-section, .modal-overlay {
            z-index: 1 !important;
        }
        
        /* Override any potential click interceptors */
        .admin-menu-dropdown * {
            pointer-events: auto !important;
        }
    </style>
</head>
<body>
    {{> common/header}}
    
    <div class="container">
        {{#successMessage}}
            <div class="alert alert-success">{{successMessage}}</div>
        {{/successMessage}}
        {{#errorMessage}}
            <div class="alert alert-danger">{{errorMessage}}</div>
        {{/errorMessage}}
        <div class="back-button-container">
            <a href="/products" class="back-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="19" y1="12" x2="5" y2="12"></line>
                    <polyline points="12 19 5 12 12 5"></polyline>
                </svg>
                Back
            </a>
        </div>
        <div class="product-details">
            <div class="product-image-container">
                <img src="/image/{{product.id}}" alt="{{product.name}}" class="product-image">
            </div>
            <div class="product-info">
                <h1 class="product-title">{{product.name}}</h1>
                <p class="product-description">{{product.description}}</p>
                <div class="product-meta">
                    <div class="price-tag">
                        <span class="label">Price:</span>
                        <span class="value">${{product.price}}</span>
                    </div>
                    <div class="stock-info">
                        <span class="label">Stock:</span>
                        <span class="value">{{product.stock}}</span>
                    </div>
                    <div class="rating-info">
                        <span class="label">Rating:</span>
                        <span class="value">{{rating}} ⭐</span>
                    </div>
                    <form id="addToCartForm" action="/add-to-order" method="post" class="add-to-cart-form">
                        <input type="hidden" name="productId" value="{{product.id}}">
                        <input type="hidden" name="_csrf" value="{{token}}"/>
                        <button type="submit" class="btn btn-primary add-to-cart-btn">Add to Cart</button>
                    </form>
                </div>

                <!-- Return Policy Section -->
                <div class="return-policy">
                    <h3>Return Policy</h3>
                    <p>Download our return policy document for detailed information about our return process.</p>
                    <a href="/download-return-policy/{{product.id}}" class="download-button">
                        <i class="fas fa-file-pdf"></i> Download Return Policy PDF
                    </a>
                </div>
            </div>
        </div>

        <div class="reviews-section">
            <h2 class="section-title">Reviews</h2>
            <div class="review-container">
                {{#reviews}}
                    <div class="review-card">
                        <div class="review-header">
                            <h4>{{user.firstName}} {{user.lastName}}</h4>
                            <div class="review-rating">
                                <span>({{rating}}/5)</span>
                                <span class="star-icon">★</span>
                            </div>
                        </div>
                        <div class="rich-text-content">
                            {{{comment}}}
                        </div>
                        {{#canDeleteReview}}
                        <form action="/delete-review" method="post" class="review-actions delete-review-form">
                            <input type="hidden" name="reviewId" value="{{id}}">
                            <input type="hidden" name="productId" value="{{productId}}">
                            <input type="hidden" name="_csrf" value="{{token}}"/>
                            <button type="button" class="btn btn-danger delete-btn" onclick="showDeleteConfirmation(this)">
                                <i class="fas fa-trash-alt"></i> Delete Review
                            </button>
                        </form>
                        {{/canDeleteReview}}
                    </div>
                {{/reviews}}
                
                {{^reviews}}
                    <p class="no-reviews">No reviews yet. Be the first to add one!</p>
                {{/reviews}}
            </div>

            {{#isLoggedIn}}
            <div class="review-form">
                <h3 class="form-title">Add Review</h3>
                <form action="/add-review" method="post" class="add-review-form" id="reviewForm">
                    <input type="hidden" name="productId" value="{{product.id}}">
                    <input type="hidden" name="comment" id="hiddenComment">
                    <input type="hidden" name="_csrf" value="{{token}}"/>
                    <div class="editor-actions">
                        <div class="draft-actions">
                            <button type="button" id="saveDraftBtn" class="draft-btn">
                                <i class="fas fa-save"></i> Save Draft
                            </button>
                            <button type="button" id="clearEditorBtn" class="draft-btn">
                                <i class="fas fa-trash"></i> Clear
                            </button>
                        </div>
                        <div class="draft-info" id="draftInfo">
                            <i class="fas fa-clock"></i> <span>No draft saved</span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <div id="editor-container"></div>
                        <div id="character-counter" class="character-counter">0/400 characters</div>
                    </div>
                    
                    <div class="form-group">
                        <select name="rating" required class="rating-select">
                            <option value="" disabled selected>Select a rating</option>
                            <option value="1">1 ⭐</option>
                            <option value="2">2 ⭐⭐</option>
                            <option value="3">3 ⭐⭐⭐</option>
                            <option value="4">4 ⭐⭐⭐⭐</option>
                            <option value="5">5 ⭐⭐⭐⭐⭐</option>
                        </select>
                    </div>
                    
                    <button type="submit" class="btn btn-primary">Submit Review</button>
                </form>
            </div>
            {{/isLoggedIn}}
            
            {{^isLoggedIn}}
            <div class="login-prompt">
                <h3>Want to leave a review?</h3>
                <p>Please <a href="/login">log in</a> to share your opinion about this product.</p>
            </div>
            {{/isLoggedIn}}
        </div>
    </div>
    
    <!-- Toast notification -->
    <div id="toast" class="toast">
        <i class="fas fa-check-circle"></i>
        <span id="toastMessage">Success message goes here</span>
    </div>
    
    <!-- Custom Delete Confirmation Modal -->
    <div id="deleteConfirmModal" class="modal-overlay">
        <div class="modal-container">
            <div class="modal-header">
                <i class="fas fa-exclamation-triangle"></i>
                <h3>Confirmar Eliminación</h3>
            </div>
            <div class="modal-body">
                <p>¿Estás seguro de que deseas eliminar esta reseña?</p>
                <p class="modal-warning">Esta acción no se puede deshacer.</p>
            </div>
            <div class="modal-actions">
                <button type="button" class="btn btn-secondary" onclick="closeDeleteModal()">
                    <i class="fas fa-times"></i> Cancelar
                </button>
                <button type="button" class="btn btn-danger" onclick="confirmDelete()">
                    <i class="fas fa-trash-alt"></i> Eliminar
                </button>
            </div>
        </div>
    </div>
    
    {{> common/footer}}
    
    <!-- Quill.js Library and DOMPurify for sanitization -->
    <script src="https://cdn.jsdelivr.net/npm/quill@1.3.6/dist/quill.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@2.3.8/dist/purify.min.js"></script>
    <script src="/js/quill-editor.js"></script>
    <script src="/js/addToCart.js"></script>
    
    <script>
        let currentFormToSubmit = null;
        
        function showDeleteConfirmation(button) {
            currentFormToSubmit = button.closest('form');
            const modal = document.getElementById('deleteConfirmModal');
            modal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }
        
        function closeDeleteModal() {
            const modal = document.getElementById('deleteConfirmModal');
            modal.classList.remove('active');
            document.body.style.overflow = '';
            currentFormToSubmit = null;
        }
        
        function confirmDelete() {
            if (currentFormToSubmit) {
                currentFormToSubmit.submit();
            }
            closeDeleteModal();
        }
        
        // Close modal when clicking on overlay
        document.addEventListener('click', function(e) {
            const modal = document.getElementById('deleteConfirmModal');
            if (e.target === modal) {
                closeDeleteModal();
            }
        });
        
        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                const modal = document.getElementById('deleteConfirmModal');
                if (modal.classList.contains('active')) {
                    closeDeleteModal();
                }
            }
        });
        
        // Handle URL parameters for error and success messages
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const error = urlParams.get('error');
            const success = urlParams.get('success');
            
            if (error) {
                showToast(decodeURIComponent(error), 'error');
                // Remove error parameter from URL without reloading
                const newUrl = window.location.pathname + '?id=' + urlParams.get('id');
                window.history.replaceState({}, document.title, newUrl);
            }
            
            if (success === 'deleted') {
                showToast('Reseña eliminada correctamente', 'success');
                // Remove success parameter from URL without reloading
                const newUrl = window.location.pathname + '?id=' + urlParams.get('id');
                window.history.replaceState({}, document.title, newUrl);
            }
        });
        
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            const icon = toast.querySelector('i');
            
            // Update message
            toastMessage.textContent = message;
            
            // Update icon and styling based on type
            if (type === 'error') {
                icon.className = 'fas fa-exclamation-triangle';
                toast.style.backgroundColor = '#e74c3c';
                toast.style.borderLeft = '4px solid #c0392b';
            } else {
                icon.className = 'fas fa-check-circle';
                toast.style.backgroundColor = '#27ae60';
                toast.style.borderLeft = '4px solid #2ecc71';
            }
            
            // Show toast
            toast.classList.add('show');
            
            // Hide toast after 4 seconds
            setTimeout(() => {
                toast.classList.remove('show');
            }, 4000);
        }
        
        // Additional fix for admin dropdown on product details page
        document.addEventListener('DOMContentLoaded', function() {
            // Wait a bit to ensure all other scripts have loaded
            setTimeout(function() {
                const adminDropdown = document.getElementById('adminMenuDropdown');
                if (adminDropdown) {
                    // Force click events on dropdown links
                    const dropdownLinks = adminDropdown.querySelectorAll('a');
                    dropdownLinks.forEach(function(link, index) {
                        // Remove any existing event listeners
                        const newLink = link.cloneNode(true);
                        link.parentNode.replaceChild(newLink, link);
                        
                        // Add fresh event listeners
                        newLink.addEventListener('click', function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            e.stopImmediatePropagation();
                            
                            const href = this.getAttribute('href');
                            console.log('Admin dropdown link clicked:', href);
                            
                            // Close dropdown
                            adminDropdown.style.display = 'none';
                            
                            // Navigate to URL with a slight delay
                            setTimeout(function() {
                                window.location.href = href;
                            }, 50);
                        });
                        
                        // Also add mousedown listener as backup
                        newLink.addEventListener('mousedown', function(e) {
                            const href = this.getAttribute('href');
                            console.log('Admin dropdown mousedown:', href);
                            
                            setTimeout(function() {
                                window.location.href = href;
                            }, 100);
                        });
                    });
                    
                    // Override any potential event capture
                    adminDropdown.addEventListener('click', function(e) {
                        if (e.target.tagName === 'A') {
                            e.stopPropagation();
                            e.stopImmediatePropagation();
                            const href = e.target.getAttribute('href');
                            console.log('Dropdown container click on link:', href);
                            
                            // Close dropdown
                            this.style.display = 'none';
                            
                            // Navigate
                            setTimeout(function() {
                                window.location.href = href;
                            }, 50);
                        }
                    });
                }
            }, 500);
        });
    </script>
</body>
</html>