<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Details</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="/css/product_template.css">
</head>

<body class="bg-gray-100 p-6">
    <header class="bg-blue-800 p-4 text-white flex justify-between items-center">
        <img src="/images/logos/logotipo.png" alt="Logo de la tienda" width="200">
        <input type="text" id="searchBar" placeholder="Search products..." class="p-2 rounded text-black w-1/3">
        <nav>
            <a href="/" class="mx-2">Home</a>
            <a href="#" class="mx-2" onclick="toggleCart()">Cart</a>
            <a href="/profile" class="mx-2">Profile</a>
        </nav>
    </header>
    <div class="container mx-auto bg-white p-8 rounded-lg shadow-lg">
        <!-- Images Section -->
        <div class="flex flex-col md:flex-row gap-8">
            <!-- Miniatures -->
            <div class="flex flex-col space-y-4">
                <img src="/images/movil/foto1.jpg" alt="Miniature 1" class="thumbnail active" onclick="changeMainImage(this)">
                <img src="/images/movil/foto3.jpg" alt="Miniature 2" class="thumbnail" onclick="changeMainImage(this)">
                <img src="/images/movil/foto4.jpg" alt="Miniature 3" class="thumbnail" onclick="changeMainImage(this)">
                <img src="/images/movil/foto5.jpg" alt="Miniature 4" class="thumbnail" onclick="changeMainImage(this)">
            </div>

            <!-- Main image -->
            <div class="flex-1">
                <img id="mainImage" src="/images/movil/foto2.jpg" alt="Product's Main Image" class="main-image">
            </div>

            <!-- Product Details -->
            <div class="flex-1">
                <h1 id="productName" class="text-3xl font-bold mb-4 text-blue-800">Loading...</h1>
                <p id="productPrice" class="text-2xl text-blue-600 font-bold mb-4">$0.00</p>

                <!-- Star rating -->
                <div class="flex items-center mb-4">
                    <a href="#rating" class="text-yellow-400 text-2xl">★★★★★</a>
                    <span id="averageRating" class="text-gray-600 ml-2">(0.0)</span>
                </div>

                <p id="productDescription" class="text-gray-600 mb-4">Loading...</p>

                <!-- Add to cart button -->
                <button onclick="addToCart()" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                    Add to cart
                </button>
            </div>
        </div>

        <!-- Recommendations -->
        <div class="mt-12 relative">
            <h2 class="text-2xl font-bold mb-6 text-blue-800">Recommended Products</h2>
            <div class="relative">
                <!-- Left scroll -->
                <button class="scroll-button left" onclick="scrollLeft()">&#10094;</button>
                <!-- Product container -->
                <div class="scroll-container" id="recommendedProducts">
                    <!-- Recommended products will be loaded dynamically -->
                </div>
                <!-- Right scroll -->
                <button class="scroll-button right" onclick="scrollRight()">&#10095;</button>
            </div>
        </div>

        <!-- Rating section -->
        <div id="rating" class="mt-12">
            <h2 class="text-2xl font-bold mb-6 text-blue-800">Rating and Reviews</h2>
            <div class="flex flex-col md:flex-row gap-8">
                <!-- Bar chart -->
                <div class="w-full md:w-1/3">
                    <canvas id="ratingChart"></canvas>
                    <p class="text-center text-gray-600 mt-4">Average rating: <span id="averageRatingText" class="font-bold">0.0</span></p>
                </div>

                <!-- Reviews -->
                <div class="w-full md:w-2/3">
                    <!-- Button to leave a review -->
                    <button onclick="toggleReviewBox()" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors mb-6">
                        Leave a review
                    </button>

                    <!-- Review box (initially hidden) -->
                    <div id="reviewBox" class="review-box bg-gray-50 p-6 rounded-lg shadow-md mb-6" style="display: none;">
                        <textarea id="reviewText" class="w-full p-4 border rounded-lg mb-4" placeholder="Write your review here..."></textarea>
                        <button onclick="submitReview()" class="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                            Submit review
                        </button>
                    </div>

                    <!-- Review list -->
                    <div id="reviewsList">
                        <!-- Reviews will be loaded dynamically -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Obtener el ID del producto de la URL
        const productId = new URLSearchParams(window.location.search).get("id");

        // Función para cargar los datos del producto
        async function loadProductDetails() {
            try {
                const response = await fetch(`/products/${productId}`);
                if (!response.ok) throw new Error("Error al cargar los detalles del producto");
                const product = await response.json();

                // Mostrar los datos del producto
                document.getElementById("productName").textContent = product.name;
                document.getElementById("productPrice").textContent = `$${product.price.toFixed(2)}`;
                document.getElementById("productDescription").textContent = product.description;

                // Cargar las reseñas del producto
                loadReviews();
            } catch (error) {
                console.error("Error:", error);
                alert("Error al cargar los detalles del producto");
            }
        }

        // Función para cargar las reseñas del producto
        async function loadReviews() {
            try {
                const response = await fetch(`/reviews/product/${productId}`);
                if (!response.ok) throw new Error("Error al cargar las reseñas");
                const reviews = await response.json();

                // Mostrar las reseñas
                const reviewsList = document.getElementById("reviewsList");
                reviewsList.innerHTML = reviews.map(review => `
                    <div class="bg-gray-50 p-6 rounded-lg shadow-md mb-4">
                        <p class="text-gray-600">"${review.comment}"</p>
                        <p class="text-gray-400 text-sm mt-2">- ${review.userId}</p>
                    </div>
                `).join("");

                // Actualizar el gráfico de calificaciones
                updateRatingChart(reviews);
            } catch (error) {
                console.error("Error:", error);
                alert("Error al cargar las reseñas");
            }
        }

        // Función para actualizar el gráfico de calificaciones
        function updateRatingChart(reviews) {
            const ratings = [0, 0, 0, 0, 0]; // Contador para 1-5 estrellas
            reviews.forEach(review => {
                ratings[review.rating - 1]++;
            });

            const totalReviews = reviews.length;
            const averageRating = (ratings.reduce((sum, count, index) => sum + count * (index + 1), 0) / totalReviews).toFixed(1);

            // Actualizar el texto de la calificación promedio
            document.getElementById("averageRating").textContent = `(${averageRating})`;
            document.getElementById("averageRatingText").textContent = averageRating;

            // Actualizar el gráfico
            ratingChart.data.datasets[0].data = ratings.map(count => (count / totalReviews) * 100);
            ratingChart.update();
        }

        // Función para agregar el producto al carrito
        async function addToCart() {
            try {
                const response = await fetch("/cart/add", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ productId, quantity: 1 })
                });

                if (!response.ok) throw new Error("Error al agregar el producto al carrito");
                alert("Producto agregado al carrito");
            } catch (error) {
                console.error("Error:", error);
                alert("Error al agregar el producto al carrito");
            }
        }

        // Función para enviar una reseña
        async function submitReview() {
            const reviewText = document.getElementById("reviewText").value;
            if (reviewText.trim() === "") {
                alert("Please, write a review.");
                return;
            }

            try {
                const response = await fetch("/reviews", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ productId, comment: reviewText, rating: 5 }) // Cambia el rating según tu lógica
                });

                if (!response.ok) throw new Error("Error al enviar la reseña");
                loadReviews(); // Recargar las reseñas
                document.getElementById("reviewText").value = "";
                toggleReviewBox();
            } catch (error) {
                console.error("Error:", error);
                alert("Error al enviar la reseña");
            }
        }

        // Función para mostrar/ocultar la caja de reseñas
        function toggleReviewBox() {
            const reviewBox = document.getElementById("reviewBox");
            reviewBox.style.display = reviewBox.style.display === "none" ? "block" : "none";
        }

        // Inicialización
        loadProductDetails();
    </script>
</body>

</html>